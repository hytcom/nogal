<?php

namespace nogal;
$this->TutorCaller(self::requirer());

class tutorOBJECTNAME extends nglTutor {

	private $db;
	private $owl;

	protected function init($aArguments=[]) {
		$this->db = self::call(DB_CONNECTOR)->connect();
		$this->owl = self::call("owl");
		$this->owl->connect($this->db);
		$this->owl->select("OBJECTNAME");
		$this->debuggable = false; // el tutor admite debug
		$this->aNulls = []; // listar los campos que en caso de estar vacios deberán guardarse como NULL
		$this->aEmpty = []; // listar los campos que en caso de ser NULL deben guardarse como vacios
		$this->aZeros = []; // listar los campos que en caso de ser NULL o vacios, deben guardarse como zeros
		$this->master = self::call("tutor.master"); // escapar si no se va a utilizar el tutor master
	}

	protected function insert($aArguments=[]) {
		if(!\count($aArguments)) { return false; }
		$aArguments = $this->Sanitize($aArguments);

		$this->alvin();

		// upload de archivos --------------------------------------------------
		// $aUploads retora los datos de los archivos subidos
		$aUploads = $this->master->unlock()->run("upload", [
			"image" => [
				"path" => NGL_PATH_PUBLIC.NGL_DIR_SLASH."files",
				"copies" => [
					["path" => NGL_PATH_PUBLIC.NGL_DIR_SLASH."files/thumbs", "img-size"=>200, "img-bgcolor"=>"#FFFFFF"]
				]
			],
			"image_web" => [
				"path" => NGL_PATH_PUBLIC.NGL_DIR_SLASH."files/web",
				"copies" => [
					["path" => NGL_PATH_PUBLIC.NGL_DIR_SLASH."files/web/thumbs", "img-size"=>200, "img-bgcolor"=>"#FFFFFF"]
				]
			]
		));

		$insert = $this->owl->insert($aArguments);

		// envio de correo -----------------------------------------------------
		$this->master->unlock()->run("mail", [
			"to" => "admin@dominio.com",
			"subject" => "Nueva Alta",
			"message" => self::call("rind")->stamp("/garden/gui/mail_template.html")
		]);

		return ($insert!==false) ? $insert : $this->owl->validate;
	}

	protected function update($aArguments=[]) {
		if(!\count($aArguments)) { return false; }
		$aArguments = $this->Sanitize($aArguments);

		$this->alvin();
		$update = $this->owl->update($aArguments);
		return ($update!==false) ? $update : $this->owl->validate;
	}

	protected function delete($aArguments=[]) {
		if(!\count($aArguments)) { return false; }

		$this->alvin();
		$nDelete = $this->owl->delete($aArguments);
		if($nDelete===false) {
			return $this->owl->log;
		} else {
			return $nDelete;
		}
	}
}

?>